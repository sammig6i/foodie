/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as publicRouteImport } from './routes/(public)/route'
import { Route as publicIndexImport } from './routes/(public)/index'
import { Route as publicSetupAdminImport } from './routes/(public)/setup-admin'
import { Route as publicSeedImport } from './routes/(public)/seed'
import { Route as AuthedAdminRouteImport } from './routes/_authed/admin/route'
import { Route as AuthedAdminIndexImport } from './routes/_authed/admin/index'
import { Route as AuthedAdminMenuImport } from './routes/_authed/admin/menu'
import { Route as AuthedAdminAvailabilityImport } from './routes/_authed/admin/availability'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const publicRouteRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const publicIndexRoute = publicIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicSetupAdminRoute = publicSetupAdminImport.update({
  id: '/setup-admin',
  path: '/setup-admin',
  getParentRoute: () => publicRouteRoute,
} as any)

const publicSeedRoute = publicSeedImport.update({
  id: '/seed',
  path: '/seed',
  getParentRoute: () => publicRouteRoute,
} as any)

const AuthedAdminRouteRoute = AuthedAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedAdminIndexRoute = AuthedAdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedAdminRouteRoute,
} as any)

const AuthedAdminMenuRoute = AuthedAdminMenuImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => AuthedAdminRouteRoute,
} as any)

const AuthedAdminAvailabilityRoute = AuthedAdminAvailabilityImport.update({
  id: '/availability',
  path: '/availability',
  getParentRoute: () => AuthedAdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/admin': {
      id: '/_authed/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthedAdminRouteImport
      parentRoute: typeof AuthedImport
    }
    '/(public)/seed': {
      id: '/(public)/seed'
      path: '/seed'
      fullPath: '/seed'
      preLoaderRoute: typeof publicSeedImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/setup-admin': {
      id: '/(public)/setup-admin'
      path: '/setup-admin'
      fullPath: '/setup-admin'
      preLoaderRoute: typeof publicSetupAdminImport
      parentRoute: typeof publicRouteImport
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/_authed/admin/availability': {
      id: '/_authed/admin/availability'
      path: '/availability'
      fullPath: '/admin/availability'
      preLoaderRoute: typeof AuthedAdminAvailabilityImport
      parentRoute: typeof AuthedAdminRouteImport
    }
    '/_authed/admin/menu': {
      id: '/_authed/admin/menu'
      path: '/menu'
      fullPath: '/admin/menu'
      preLoaderRoute: typeof AuthedAdminMenuImport
      parentRoute: typeof AuthedAdminRouteImport
    }
    '/_authed/admin/': {
      id: '/_authed/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AuthedAdminIndexImport
      parentRoute: typeof AuthedAdminRouteImport
    }
  }
}

// Create and export the route tree

interface publicRouteRouteChildren {
  publicSeedRoute: typeof publicSeedRoute
  publicSetupAdminRoute: typeof publicSetupAdminRoute
  publicIndexRoute: typeof publicIndexRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicSeedRoute: publicSeedRoute,
  publicSetupAdminRoute: publicSetupAdminRoute,
  publicIndexRoute: publicIndexRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface AuthedAdminRouteRouteChildren {
  AuthedAdminAvailabilityRoute: typeof AuthedAdminAvailabilityRoute
  AuthedAdminMenuRoute: typeof AuthedAdminMenuRoute
  AuthedAdminIndexRoute: typeof AuthedAdminIndexRoute
}

const AuthedAdminRouteRouteChildren: AuthedAdminRouteRouteChildren = {
  AuthedAdminAvailabilityRoute: AuthedAdminAvailabilityRoute,
  AuthedAdminMenuRoute: AuthedAdminMenuRoute,
  AuthedAdminIndexRoute: AuthedAdminIndexRoute,
}

const AuthedAdminRouteRouteWithChildren =
  AuthedAdminRouteRoute._addFileChildren(AuthedAdminRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedAdminRouteRoute: typeof AuthedAdminRouteRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedAdminRouteRoute: AuthedAdminRouteRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof publicIndexRoute
  '': typeof AuthedRouteWithChildren
  '/admin': typeof AuthedAdminRouteRouteWithChildren
  '/seed': typeof publicSeedRoute
  '/setup-admin': typeof publicSetupAdminRoute
  '/admin/availability': typeof AuthedAdminAvailabilityRoute
  '/admin/menu': typeof AuthedAdminMenuRoute
  '/admin/': typeof AuthedAdminIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthedRouteWithChildren
  '/seed': typeof publicSeedRoute
  '/setup-admin': typeof publicSetupAdminRoute
  '/': typeof publicIndexRoute
  '/admin/availability': typeof AuthedAdminAvailabilityRoute
  '/admin/menu': typeof AuthedAdminMenuRoute
  '/admin': typeof AuthedAdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(public)': typeof publicRouteRouteWithChildren
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/admin': typeof AuthedAdminRouteRouteWithChildren
  '/(public)/seed': typeof publicSeedRoute
  '/(public)/setup-admin': typeof publicSetupAdminRoute
  '/(public)/': typeof publicIndexRoute
  '/_authed/admin/availability': typeof AuthedAdminAvailabilityRoute
  '/_authed/admin/menu': typeof AuthedAdminMenuRoute
  '/_authed/admin/': typeof AuthedAdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/admin'
    | '/seed'
    | '/setup-admin'
    | '/admin/availability'
    | '/admin/menu'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/seed'
    | '/setup-admin'
    | '/'
    | '/admin/availability'
    | '/admin/menu'
    | '/admin'
  id:
    | '__root__'
    | '/(public)'
    | '/_authed'
    | '/_authed/admin'
    | '/(public)/seed'
    | '/(public)/setup-admin'
    | '/(public)/'
    | '/_authed/admin/availability'
    | '/_authed/admin/menu'
    | '/_authed/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  publicRouteRoute: typeof publicRouteRouteWithChildren
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  publicRouteRoute: publicRouteRouteWithChildren,
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(public)",
        "/_authed"
      ]
    },
    "/(public)": {
      "filePath": "(public)/route.tsx",
      "children": [
        "/(public)/seed",
        "/(public)/setup-admin",
        "/(public)/"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/admin"
      ]
    },
    "/_authed/admin": {
      "filePath": "_authed/admin/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/admin/availability",
        "/_authed/admin/menu",
        "/_authed/admin/"
      ]
    },
    "/(public)/seed": {
      "filePath": "(public)/seed.tsx",
      "parent": "/(public)"
    },
    "/(public)/setup-admin": {
      "filePath": "(public)/setup-admin.tsx",
      "parent": "/(public)"
    },
    "/(public)/": {
      "filePath": "(public)/index.tsx",
      "parent": "/(public)"
    },
    "/_authed/admin/availability": {
      "filePath": "_authed/admin/availability.tsx",
      "parent": "/_authed/admin"
    },
    "/_authed/admin/menu": {
      "filePath": "_authed/admin/menu.tsx",
      "parent": "/_authed/admin"
    },
    "/_authed/admin/": {
      "filePath": "_authed/admin/index.tsx",
      "parent": "/_authed/admin"
    }
  }
}
ROUTE_MANIFEST_END */
